install.packages("tidyverse")
install.packages("pacman")
install.packages("lmer")
install.packages("lmer4")
citation("ggplot2")
install.packages('DBI')
install.packages('RSQLite')
install.packages('dbplyr')
con = DBI::dbConnect(RSQLite::SQLite(), dbname = "/Users/isalykkehansen/Library/Group\ Containers/UBF8T346G9.Office/Outlook/Outlook\ 15\ Profiles/Main\ Profile/Data/BlockLocks.sqlite")
DBI::dbGetQuery(con, "SELECT name FROM sqlite _master WHERE type = 'table';")
DBI::dbGetQuery(con, "SELECT name FROM sqlite_master WHERE type = 'table';")
dbplyr::tbl(con, "BlockLocks")
dbplyr::tbl(con, "1 BlockLocks")
dbplyr::tbl(con, "Settings")
dbplyr::table(con, "Settings")
dbplyr::tbl(con, "Settings")
dplyr::tbl(con, "Settings")
dbplyr::db_collect()
dbplyr::collect()
#set up connection to the sqlite server
con = DBI::dbConnect(RSQLite::SQLite(), dbname = "/Users/isalykkehansen/Library/Group\ Containers/UBF8T346G9.Office/Outlook/Outlook\ 15\ Profiles/Main\ Profile/Data/Outlook.sqlite")
#make a query to find the tables on the server
DBI::dbGetQuery(con, "SELECT name FROM sqlite_master WHERE type = 'table';")
dplyr::tbl(con, "Conversations")
dplyr::tbl(con, "Mail_Categories")
dplyr::tbl(con, "Contacts")
dbplyr::tbl(con, "Contacts")
dplyr::tbl(con, "Contacts")
mytable <- dplyr::tbl(con, "Contacts")
View(mytable)
#make a query to find the tables on the server
sqlite_table <-  DBI::dbGetQuery(con, "SELECT name FROM sqlite_master WHERE type = 'table';")
View(sqlite_table)
most_commen <- filter(mytable, Record_ModDate > 2)
mytable <- dplyr::tbl(con, "Contacts")
most_commen <- filter(mytable, Record_ModDate > 2)
most_commen <- mutate(mytable, col1 = col2)
library(tidyverse)
mytable <- dbplyr::tbl(con, "Contacts")
mytable <- dplyr::tbl(con, "Contacts")
most_commen <- mutate(mytable, col1 = col2)
View(most_commen)
most_commen <- mutate(mytable, col1 = col2) %>%
filter(col3 %in% c("a", "b"))
View(most_commen)
most_commen <- mutate(mytable, col1 = col2) %>%
filter(col3 %in% c("a", "b"))
View(most_commen)
dbplyr::collect(most_commen)
dplyr::collect(most_commen)
View(sqlite_table)
mytable <- dplyr::tbl(con, "Contacts")
mytable
most_commen <- mutate(mytable, col1 = Record_ModDate) %>%
filter(col3 %in% c("a", "b"))
dplyr::collect(most_commen)
most_commen <- mutate(mytable, col1 = Record_ModDate) %>%
filter(col1 %in% c("a", "b"))
dplyr::collect(most_commen)
collect(most_commen)
dplyr::collect(most_commen)
most_commen <- mutate(mytable, col1 = Else  Bay) %>%
filter(col1 %in% c("a", "b"))
most_commen <- mutate(mytable, col1 = Contact_Display…) %>%
filter(col1 %in% c("a", "b"))
most_commen <- mutate(mytable, col1 = "Contact_Display…") %>%
filter(col1 %in% c("a", "b"))
dplyr::collect(most_commen)
nycflights13
install.packages("nycflights13")
library(nycflights13)
data <- select(mytable, key)
dplyr::collect(most_commen)
data <- select(mytable, Record_FolderID)
dplyr::collect(most_commen)
data_out <- dplyr::collect(most_commen)
View(data_out)
data_out <- dplyr::collect(data)
View(data_out)
data <- select(mytable, Record_FolderID) %>%
summarise()
data_out <- dplyr::collect(data)
data <- group_by(mytable, Record_FolderID) %>%
summarise(n() = n)
data <- group_by(mytable, Record_FolderID) %>%
summarise(n = n())
data_out <- dplyr::collect(data)
View(data_out)
data <- group_by(mytable, Record_AccountU…) %>%
summarise(n = n())
data_out <- dplyr::collect(data)
data <- group_by(mytable, Record_FolderID) %>%
summarise(n = n())
data_out <- dplyr::collect(data)
nycflights13::weather
sqldf("SELECT wind_speed FROM weather WHERE day BETWEEN 21 and 28 AND month 11;")
install.packages("sqldf")
library(sqldf)
sqldf("SELECT wind_speed FROM weather WHERE day BETWEEN 21 and 28 AND month 11;")
sqldf("SELECT wind_speed FROM weather WHERE day BETWEEN 21 and 28 AND month = 11;")
sqldf("SELECT wind_speed FROM weather WHERE day BETWEEN 21 AND 28 AND month = 11;")
weather <- nycflights13::weather
View(weather)
sqldf("SELECT wind_speed FROM weather WHERE day BETWEEN 21 AND 28 AND month = 11 AND hour = 19;")
sqldf("SELECT wind_speed FROM weather WHERE day BETWEEN 21 AND 28 AND month == 11 AND hour = 19;")
sqldf("SELECT wind_speed FROM weather WHERE day BETWEEN 21 AND 28 AND month == 11 AND hour == 19;")
sqldf("SELECT wind_speed FROM weather WHERE day BETWEEN 21 AND 28 AND month = 11 AND hour = 19; AND origin = JFK")
sqldf("SELECT wind_speed FROM weather WHERE day BETWEEN 21 AND 28 AND month = 11 AND hour = 19; AND origin = 'JFK'")
sqldf("SELECT wind_speed FROM weather WHERE day BETWEEN 21 AND 28 AND month = 11 AND hour = 19 AND origin = JFK;")
sqldf("SELECT wind_speed FROM weather WHERE day BETWEEN 21 AND 28 AND month = 11 AND hour = 19 AND origin = 'JFK';")
sqldf("SELECT wind_speed FROM weather WHERE day BETWEEN 21 AND 28 AND month = 11 AND origin = 'JFK';")
sqldf("SELECT AVG wind_speed FROM weather WHERE day BETWEEN 21 AND 28 AND month = 11 AND origin = 'JFK';")
sqldf("SELECT wind_speed AVG FROM weather WHERE day BETWEEN 21 AND 28 AND month = 11 AND origin = 'JFK';")
sqldf("SELECT AVG wind_speed FROM weather WHERE day BETWEEN 21 AND 28 AND month = 11 AND origin = 'JFK';")
sqldf("SELECT AVG (wind_speed) FROM weather WHERE day BETWEEN 21 AND 28 AND month = 11 AND origin = 'JFK';")
#find seat distribution
seats <- nycflights13::planes
View(seats)
View(seats)
#good join solution
df = data.frame(startdate = 3, enddate = 17) #create a smaller table to look up in
sqldf("SELECT * FROM weather
LEFT JOIN df
ON weather.day BETWEEN df.startdata AND df.enddate")
sqldf("SELECT * FROM weather
LEFT JOIN df
ON weather.day BETWEEN df.startdate AND df.enddate")
sqldf("SELECT * FROM weather
LEFT JOIN df
ON weather.day BETWEEN df.startdate AND df.enddate;")
weather2 = mutate(weather, date = str_c(year, month, day, sep = "-"))
View(weather2)
library(lubridate)
weather2 = ymd(mutate(weather, date = str_c(year, month, day, sep = "-")))
#good join solution
df = data.frame(startdate = ymd("2013-01-20"), enddate = ymd("2013-01-29")) #create a smaller table to look up in
sqldf("SELECT * FROM weather
LEFT JOIN df
ON weather.day BETWEEN df.startdate AND df.enddate;")
#good join solution
df = data.frame(startdate = ymd("2013-01-20"), enddate = ymd("2013-01-29")) #create a smaller table to look up in
weather2 = as.Date(date)
weather2 = mutate(weather, date = str_c(year, month, day, sep = "-"))
weather2 = as.Date(date)
weather2 = ymd(date)
library(R2jags)
library(extraDistr) #for categorical distributins
library(tidyverse)
set.seed(1982) #to make the model reproducible
setwd("~/OneDrive/uni_kandidat/advanced_cognitive_modelling_ACM/coding_excersises")
HC_data <- read.txt("4_rawData/IGTdata_healthy_control.txt")
HC_data <- read.table("4_rawData/IGTdata_healthy_control.txt")
View(HC_data)
HC_data <- read.table("4_rawData/IGTdata_healthy_control.txt", header = TRUE)
View(HC_data)
library(R2jags)
library(extraDistr) #for categorical distributins
library(tidyverse)
set.seed(1982) #to make the model reproducible
setwd("~/OneDrive/uni_kandidat/advanced_cognitive_modelling_ACM/coding_excersises")
HC_data <- read.table("4_rawData/IGTdata_healthy_control.txt", header = TRUE)
HC_data <- read.table("4_rawData/IGTdata_healthy_control.txt", header = TRUE)
View(HC_data)
View(HC_data)
subIDs <- unique(HC_data$subjID)
nsubs <- length(subIDs)
ntrials_max <- 100
x_raw <- HC_data$deck #the choices
X_raw <- HC_data$gain + HC_data$loss #the outcomes
X_raw <- HC_data$gain + HC_data$loss #the total outcomes
x_all <- array(0, c(nsubs, ntrials_max))
ntrials_all <- array(0,c(nsubs))
x_all <- array(0, c(nsubs, ntrials_max))
X_all <- array(0, c(nsubs, ntrials_max))
for (s in 1:nsubs) {
ntrials_all[s] <- length(x_raw[HC_data$subjID==subIDs[s]]) #count the #trials subject s did
#------------temporary data-------------
#we will pad arrays with NA's where ntrials < 100
x_sub <- x_raw[HC_data$subjID==subIDs[s]]
length(x_sub) <- ntrials_max
X_sub <- X_raw[HC_data$subjID==subIDs[s]]
length(X_sub) <- ntrials_max
#----------------------------------------
x_all[s,] <- x_sub
X_all[s,] <- X_sub
}
View(x_all)
View(X_all)
for (s in 1:nsubs) {
ntrials_all[s] <- length(x_raw[HC_data$subjID==subIDs[s]]) #count the #trials subject s did
#------------temporary data-------------
#we will pad arrays with NA's where ntrials < 100
x_sub <- x_raw[HC_data$subjID==subIDs[s]]
length(x_sub) <- ntrials_max
print(x_sub)
X_sub <- X_raw[HC_data$subjID==subIDs[s]]
length(X_sub) <- ntrials_max
#----------------------------------------
x_all[s,] <- x_sub
X_all[s,] <- X_sub
}
x_raw
for (s in 1:nsubs) {
ntrials_all[s] <- length(x_raw[HC_data$subjID==subIDs[s]]) #count the #trials subject s did
#------------temporary data-------------
#we will pad arrays with NA's where ntrials < 100
x_sub <- x_raw[HC_data$subjID==subIDs[s]]
length(x_sub) <- ntrials_max
X_sub <- X_raw[HC_data$subjID==subIDs[s]]
length(X_sub) <- ntrials_max
#----------------------------------------
x_all[s,] <- x_sub
print(x_all[s,])
X_all[s,] <- X_sub
}
x <- x_all[1,]
X <- X_all[1,]
ntrials <- ntrials_all[1]
x <- x_all[1,]
X <- X_all[1,]
ntrials <- ntrials_all[1]
data <- list("x", "X", "ntrials")
params <- c("w", "A", "theta", "a")
samples <- jags(data, inits = NULL, params,
model.file = "3_PVL_model.txt",
n.chains = 3, n.iter = 5000, n.burnin = 1000, n.thin = 1)
w_infer <- samples$BUGSoutput$sims.list$w
A_infer <- samples$BUGSoutput$sims.list$A
theta_infer <- samples$BUGSoutput$sims.list$theta
a_infer <- samples$BUGSoutput$sims.list$a
par(mfrow=c(2,2))
plot(density(w_infer))
plot(density(A_infer))
plot(density(theta_infer))
plot(density(a_infer))
w_infer <- samples$BUGSoutput$sims.list$w
A_infer <- samples$BUGSoutput$sims.list$A
theta_infer <- samples$BUGSoutput$sims.list$theta
a_infer <- samples$BUGSoutput$sims.list$a
par(mfrow=c(2,2))
plot(density(w_infer))
plot(density(A_infer))
plot(density(theta_infer))
plot(density(a_infer))
par(mfrow=c(2,2))
plot(density(w_infer))
plot(density(A_infer))
plot(density(theta_infer))
plot(density(a_infer))
plot(density(a_infer))
x <- x_all[5,]
X <- X_all[5,]
ntrials <- ntrials_all[5]
data <- list("x", "X", "ntrials")
params <- c("w", "A", "theta", "a")
samples <- jags(data, inits = NULL, params,
model.file = "3_PVL_model.txt",
n.chains = 3, n.iter = 5000, n.burnin = 1000, n.thin = 1)
w_infer <- samples$BUGSoutput$sims.list$w
A_infer <- samples$BUGSoutput$sims.list$A
theta_infer <- samples$BUGSoutput$sims.list$theta
a_infer <- samples$BUGSoutput$sims.list$a
par(mfrow=c(2,2))
plot(density(w_infer))
plot(density(A_infer))
plot(density(theta_infer))
plot(density(a_infer))
x <- x_all[5,]
X <- X_all[5,]
ntrials <- ntrials_all[5]
data <- list("x", "X", "ntrials")
params <- c("w", "A", "theta", "a")
samples <- jags(data, inits = NULL, params,
model.file = "3_PVL_model.txt",
n.chains = 3, n.iter = 5000, n.burnin = 1000, n.thin = 1)
w_infer <- samples$BUGSoutput$sims.list$w
A_infer <- samples$BUGSoutput$sims.list$A
theta_infer <- samples$BUGSoutput$sims.list$theta
a_infer <- samples$BUGSoutput$sims.list$a
par(mfrow=c(2,2))
plot(density(w_infer))
plot(density(A_infer))
plot(density(theta_infer))
plot(density(a_infer))
x <- x_all[5,]
X <- X_all[5,]
ntrials <- ntrials_all[5]
data <- list("x", "X", "ntrials")
params <- c("w", "A", "theta", "a", "p")
samples <- jags(data, inits = NULL, params,
model.file = "3_PVL_model.txt",
n.chains = 3, n.iter = 5000, n.burnin = 1000, n.thin = 1)
w_infer <- samples$BUGSoutput$sims.list$w
A_infer <- samples$BUGSoutput$sims.list$A
theta_infer <- samples$BUGSoutput$sims.list$theta
a_infer <- samples$BUGSoutput$sims.list$a
par(mfrow=c(2,2))
plot(density(w_infer))
plot(density(A_infer))
plot(density(theta_infer))
plot(density(a_infer))
p_post <- samples$BUGSoutput$sims.list$p
p_post <- samples$BUGSoutput$sims.list$p
par(mfrow=c(2,2))
plot(density(p_post[,32,1]))
plot(density(p_post[,32,2]))
plot(density(p_post[,32,3]))
plot(density(p_post[,32,4]))
source("2_MAP_function.R") #import the MAP function
source("function_MAP.R") #import the MAP function
View(MAP_function)
density(MAP_function(deck1))
p_post <- samples$BUGSoutput$sims.list$p
par(mfrow=c(2,2))
plot(density(p_post[,32,1]))
plot(density(p_post[,32,2]))
plot(density(p_post[,32,3]))
plot(density(p_post[,32,4]))
deck1 <- p_post[,32,1]
deck2 <- p_post[,32,2]
deck3 <- p_post[,32,3]
deck4 <- p_post[,32,4]
density(MAP_function(deck1))
deck1
samples$BUGSoutput$sims.list$p
p_post
p_post[32,1]
p_post[,32,1]
p_post <- samples$BUGSoutput$sims.list$p
par(mfrow=c(2,2))
plot(density(p_post[,32,1]))
plot(density(p_post[,32,2]))
plot(density(p_post[,32,3]))
plot(density(p_post[,32,4]))
deck1 <- p_post[,32,1]
deck2 <- p_post[,32,2]
deck3 <- p_post[,32,3]
deck4 <- p_post[,32,4]
MAP_function(deck1)
source("function_MAP.R") #import the MAP function
x_predict <- array(c(ntrials))
for (t in 1:ntrials) {
p_predict <- c(
MAP_function(p_post[,t,1]),
MAP_function(p_post[,t,2]),
MAP_function(p_post[,t,3]),
MAP_function(p_post[,t,4]))
x_predict[t] <- which.max(p_predict)
}
sum(x_predict==x)
p_post <- samples$BUGSoutput$sims.list$p
par(mfrow=c(2,2))
plot(density(p_post[,32,1]))
plot(density(p_post[,32,2]))
plot(density(p_post[,32,3]))
plot(density(p_post[,32,4]))
source("function_MAP.R") #import the MAP function
x_predict <- array(c(ntrials))
for (t in 1:ntrials) {
p_predict <- c(
MAP_function(p_post[,t,1]),
MAP_function(p_post[,t,2]),
MAP_function(p_post[,t,3]),
MAP_function(p_post[,t,4]))
x_predict[t] <- which.max(p_predict)
}
sum(x_predict==x)
pred_success <- array(c(nsubs))
for (s in 1:nsubs){
x <- x_all[s,]
X <- X_all[s,]
ntrials <- ntrials_all[s] #make sure we're only running jags for as many trials as the subject did
data <- list("x", "X", "ntrials")
params <- c("w", "A", "theta", "a", "p")
samples <- jags(data, inits = NULL, params,
model.file = "3_PVL_model.txt",
n.chains = 3, n.iter = 5000, n.burnin = 1000, n.thin = 1)
p_post <- samples$BUGSoutput$sims.list$p #we're extracting the probability to see how well the model does at predicting actual data
x_predict <- array(c(ntrials))
for (t in 1:ntrials) {
p_predict <- c(
MAP_function(p_post[,t,1]),
MAP_function(p_post[,t,2]),
MAP_function(p_post[,t,3]),
MAP_function(p_post[,t,4]))
x_predict[t] <- which.max(p_predict)
}
pred_success[s] <- sum(x_predict==x, na.rm = TRUE)
print(s)
}
pred_success <- array(c(nsubs))
for (s in 1:nsubs){
x <- x_all[s,]
X <- X_all[s,]
ntrials <- ntrials_all[s] #make sure we're only running jags for as many trials as the subject did
data <- list("x", "X", "ntrials")
params <- c("w", "A", "theta", "a", "p")
samples <- jags.parallel(data, inits = NULL, params,
model.file = "3_PVL_model.txt",
n.chains = 3, n.iter = 5000, n.burnin = 1000, n.thin = 1)
p_post <- samples$BUGSoutput$sims.list$p #we're extracting the probability to see how well the model does at predicting actual data
x_predict <- array(c(ntrials))
for (t in 1:ntrials) {
p_predict <- c(
MAP_function(p_post[,t,1]),
MAP_function(p_post[,t,2]),
MAP_function(p_post[,t,3]),
MAP_function(p_post[,t,4]))
x_predict[t] <- which.max(p_predict)
}
pred_success[s] <- sum(x_predict==x, na.rm = TRUE)
print(s)
}
setwd("/Users/isalykkehansen/Desktop/Git/Data-Science-Exam-2020/analysis_")
library(pacman)
p_load(tidyverse, cvms, groupdata2, knitr, doParallel)
set.seed(1991)
setwd("~/Desktop/Git/Data-Science-Exam-2020/analysis")
setwd("~/Desktop/Git/Data-Science-Exam-2020/analysis")
library(pacman)
p_load(tidyverse, cvms, groupdata2, knitr, doParallel)
set.seed(1991)
metadata <- read.csv("metadata.csv")
